{"version":3,"file":"static/js/596.13ea41ba.chunk.js","mappings":"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","sources":["app/reducers/usePokemonData.ts","components/PokemonCardGrid.tsx","app/reducers/usePokemonList.ts","pages/Search.tsx"],"sourcesContent":["import { UseQueryResult, useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\nimport { pokemonTypes } from \"../../utils\";\r\nimport { pokemonRoute } from \"../../utils/constants\";\r\nimport { PokemonType } from \"../../utils/pokemonTypes\";\r\nimport { userPokemonsType } from \"../../utils/types\";\r\n\r\nfunction chunkArray(array: any, chunkSize: number) {\r\n  const result = [];\r\n  for (let i = 0; i < array.length; i += chunkSize) {\r\n    result.push(array.slice(i, i + chunkSize));\r\n  }\r\n  return result;\r\n}\r\n\r\nconst getPokemonData = async (pokemonId: number) => {\r\n  const { data } = await axios.get(`${pokemonRoute}/${pokemonId}`);\r\n\r\n  const types = data.types.map(\r\n    ({ type: { name } }: { type: { name: PokemonType } }) => ({\r\n      [name]: pokemonTypes[name],\r\n    })\r\n  );\r\n\r\n  const image =\r\n    data.sprites.other.home.front_default ||\r\n    data.sprites.other.home.front_shiny ||\r\n    data.sprites.other.dream_world.front_shiny ||\r\n    data.sprites.other.dream_world.front_default ||\r\n    data.sprites.front_shiny ||\r\n    data.sprites.front_default;\r\n  return {\r\n    name: data.name,\r\n    id: data.id,\r\n    image: image,\r\n    types,\r\n  };\r\n};\r\n\r\nexport const getPokemonDataByUrl = async (pokemon: { url: string }) => {\r\n  const { data } = await axios.get(pokemon.url);\r\n\r\n  const types = data.types.map(\r\n    ({ type: { name } }: { type: { name: PokemonType } }) => ({\r\n      [name]: pokemonTypes[name],\r\n    })\r\n  );\r\n  const image =\r\n    data.sprites.other.home.front_default ||\r\n    data.sprites.other.home.front_default ||\r\n    data.sprites.front_shiny ||\r\n    data.sprites.front_default;\r\n\r\n  return {\r\n    name: data.name,\r\n    id: data.id,\r\n    image,\r\n    types,\r\n  };\r\n};\r\n\r\nexport const usePokemonQuery = (pokemonIds: number[]) => {\r\n  return useQuery(\"pokemonData\", async () => {\r\n    const promises = pokemonIds.map((pokemonId) => getPokemonData(pokemonId));\r\n    const results = await Promise.all(promises);\r\n\r\n    // Filter out null values (Pokémon without images)\r\n    return results.filter((pokemonData) => pokemonData !== null);\r\n  });\r\n};\r\n\r\nexport const usePokemonQueryByUrl = (pokemons: { url: string }[]) => {\r\n  return useQuery([\"pokemonDataByUrl\", pokemons], async () => {\r\n    const promises = pokemons.map((pokemon: { url: string }) =>\r\n      getPokemonDataByUrl(pokemon)\r\n    );\r\n    const results = await Promise.all(promises);\r\n\r\n    // Filter out null values (Pokémon without images)\r\n    return results.filter((pokemonData) => pokemonData !== null);\r\n  });\r\n};\r\nexport const useRandomPokemonQuery: () => UseQueryResult<\r\n  userPokemonsType[]\r\n> = () => {\r\n  return useQuery(\r\n    \"randomPokemonData\",\r\n    async () => {\r\n      const generateRandomNumbers = (count: number, max: number) => {\r\n        const randomNumbers: number[] = [];\r\n        while (randomNumbers.length < count) {\r\n          const randomNumber = Math.floor(Math.random() * max) + 1;\r\n          if (!randomNumbers.includes(randomNumber)) {\r\n            randomNumbers.push(randomNumber);\r\n          }\r\n        }\r\n        return randomNumbers;\r\n      };\r\n\r\n      const pokemonIds = generateRandomNumbers(80, 1302);\r\n      try {\r\n        const promises = pokemonIds.map((pokemonId: number) =>\r\n          getPokemonData(pokemonId)\r\n        );\r\n\r\n        const chunkedArrays = chunkArray(promises, 8);\r\n        const promiseChunks = chunkedArrays.map((chunk) => {\r\n          return Promise.race(chunk);\r\n        });\r\n        const firstResolvedResults = await Promise.all(promiseChunks);\r\n\r\n        if (firstResolvedResults !== null) {\r\n          return firstResolvedResults;\r\n        } else {\r\n          throw new Error(\"No valid Pokémon data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching random Pokémon data:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n    {\r\n      refetchInterval: 10000, // 10 seconds in milliseconds\r\n    }\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { IoGitCompare } from \"react-icons/io5\";\r\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\r\nimport {\r\n  addToCompare,\r\n  removeFromUserPokemonList,\r\n  setCurrentPokemon,\r\n} from \"../app/slices/PokemonSlice\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\r\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\r\nimport { pokemonTabs } from \"../utils/constants\";\r\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\r\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  return (\r\n    <div className=\"pokemon-card-grid-container\">\r\n      <div className=\"pokemon-card-grid\">\r\n        {pokemons &&\r\n          pokemons.length > 0 &&\r\n          pokemons?.map((data: userPokemonsType) => {\r\n            return (\r\n              <div key={data.id} className=\"pokemon-card\">\r\n                <div className=\"pokemon-card-list\">\r\n                  {location.pathname.includes(\"/pokemon\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : location.pathname.includes(\"/search\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : (\r\n                    <FaTrash\r\n                      className=\"trash\"\r\n                      onClick={async () => {\r\n                        await dispatch(removeFromUserPokemonList(data));\r\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\r\n                      }}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <div className=\"pokemon-card-compare\">\r\n                  <IoGitCompare\r\n                    onClick={() => {\r\n                      dispatch(addToCompare(data));\r\n                      dispatch(\r\n                        setToast(\r\n                          `${data.name} has been added to compare queue.`\r\n                        )\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\r\n                <img\r\n                  src={data.image}\r\n                  alt=\"\"\r\n                  className=\"pokemon-card-image\"\r\n                  loading=\"lazy\"\r\n                  onClick={() => {\r\n                    dispatch(setPokemonTab(pokemonTabs.description));\r\n                    dispatch(setCurrentPokemon(undefined));\r\n                    navigate(`/pokemon/${data.id}`);\r\n                  }}\r\n                />\r\n                <div className=\"pokemon-card-types\">\r\n                  {data.types.map(\r\n                    (type: pokemonTypeInterface, index: number) => {\r\n                      const keys = Object.keys(type);\r\n                      return (\r\n                        <div className=\"pokemon-card-types-type\" key={index}>\r\n                          <img\r\n                            src={type[keys[0]].image}\r\n                            alt=\"pokemon type\"\r\n                            className=\"pokemon-card-types-type-image\"\r\n                            loading=\"lazy\"\r\n                          />\r\n                          <h6 className=\"pokemon-card-types-type-text\">\r\n                            {keys[0]}\r\n                          </h6>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonCardGrid;\r\n","import { useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\nimport { pokemonsRoute } from \"../../utils/constants\";\r\n\r\nconst getPokemonList = async () => {\r\n  const { data } = await axios.get(pokemonsRoute);\r\n  return data.results;\r\n};\r\n\r\nconst usePokemonList = () => {\r\n  return useQuery(\"getAllPokemon\", async () => {\r\n    return await getPokemonList();\r\n  });\r\n};\r\n\r\nexport default usePokemonList;\r\n","import Wrapper from \"../sections/Wrapper\";\r\nimport Loader from \"../components/Loader\";\r\nimport {\r\n  usePokemonQueryByUrl,\r\n  useRandomPokemonQuery,\r\n} from \"../app/reducers/usePokemonData\";\r\nimport PokemonCardGrid from \"../components/PokemonCardGrid\";\r\nimport usePokemonList from \"../app/reducers/usePokemonList\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const Search = () => {\r\n  const handleChange = (value: string) => {\r\n    getPokemon(value);\r\n  };\r\n  const { data: allPokemon } = usePokemonList();\r\n  const { data: randomPokemons, isLoading } = useRandomPokemonQuery();\r\n  const [filteredPokemon, setFilteredPokemon] = useState<\r\n    {\r\n      name?: \"\";\r\n      url: string;\r\n    }[]\r\n  >([{ url: \"\" }]);\r\n  const [displayPokemons, setDisplayPokemons] = useState(randomPokemons);\r\n\r\n  const { data: searchedPokemon } = usePokemonQueryByUrl(filteredPokemon);\r\n\r\n  const getPokemon = (value: string) => {\r\n    if (value.length > 0) {\r\n      const pokemons = allPokemon\r\n        .filter((pokemon: any) => pokemon.name.startsWith(value.toLowerCase()))\r\n        .slice(0, 10);\r\n      setFilteredPokemon(pokemons);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setDisplayPokemons(searchedPokemon || randomPokemons);\r\n  }, [searchedPokemon, randomPokemons, filteredPokemon]);\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => handleChange(e.target.value)}\r\n            className=\"pokemon-searchbar\"\r\n            placeholder=\"Search Pokemon\"\r\n          />\r\n          {displayPokemons && <PokemonCardGrid pokemons={displayPokemons} />}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Wrapper(Search);\r\n"],"names":["getPokemonData","async","data","axios","pokemonRoute","pokemonId","types","map","type","name","pokemonTypes","image","sprites","other","home","front_default","front_shiny","dream_world","id","getPokemonDataByUrl","pokemon","url","usePokemonQueryByUrl","pokemons","useQuery","promises","Promise","all","filter","pokemonData","useRandomPokemonQuery","pokemonIds","count","max","randomNumbers","length","randomNumber","Math","floor","random","includes","push","generateRandomNumbers","promiseChunks","array","chunkSize","result","i","slice","chunkArray","chunk","race","firstResolvedResults","Error","error","console","refetchInterval","dispatch","useAppDispatch","navigate","useNavigate","location","useLocation","className","pathname","onClick","addPokemonToList","removeFromUserPokemonList","setToast","addToCompare","src","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","index","keys","Object","pokemonsRoute","results","getPokemonList","Search","allPokemon","usePokemonList","randomPokemons","isLoading","filteredPokemon","setFilteredPokemon","useState","displayPokemons","setDisplayPokemons","searchedPokemon","getPokemon","value","startsWith","toLowerCase","useEffect","Loader","onChange","e","handleChange","target","placeholder","PokemonCardGrid","Wrapper"],"sourceRoot":""}