{"version":3,"file":"static/js/797.2c17688d.chunk.js","mappings":"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","sources":["app/reducers/usePokemonData.ts","components/PokemonCardGrid.tsx","pages/Pokemon/Evolution.tsx","pages/Pokemon/Locations.tsx","pages/Pokemon/CapableMoves.tsx","components/Info.tsx","components/PokemonContainer.tsx","pages/Pokemon/Description.tsx","pages/Pokemon.tsx"],"sourcesContent":["import { UseQueryResult, useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\nimport { pokemonTypes } from \"../../utils\";\r\nimport { pokemonRoute } from \"../../utils/constants\";\r\nimport { PokemonType } from \"../../utils/pokemonTypes\";\r\nimport { userPokemonsType } from \"../../utils/types\";\r\n\r\nfunction chunkArray(array: any, chunkSize: number) {\r\n  const result = [];\r\n  for (let i = 0; i < array.length; i += chunkSize) {\r\n    result.push(array.slice(i, i + chunkSize));\r\n  }\r\n  return result;\r\n}\r\n\r\nconst getPokemonData = async (pokemonId: number) => {\r\n  const { data } = await axios.get(`${pokemonRoute}/${pokemonId}`);\r\n\r\n  const types = data.types.map(\r\n    ({ type: { name } }: { type: { name: PokemonType } }) => ({\r\n      [name]: pokemonTypes[name],\r\n    })\r\n  );\r\n\r\n  const image =\r\n    data.sprites.other.home.front_default ||\r\n    data.sprites.other.home.front_shiny ||\r\n    data.sprites.other.dream_world.front_shiny ||\r\n    data.sprites.other.dream_world.front_default ||\r\n    data.sprites.front_shiny ||\r\n    data.sprites.front_default;\r\n  return {\r\n    name: data.name,\r\n    id: data.id,\r\n    image: image,\r\n    types,\r\n  };\r\n};\r\n\r\nexport const getPokemonDataByUrl = async (pokemon: { url: string }) => {\r\n  const { data } = await axios.get(pokemon.url);\r\n\r\n  const types = data.types.map(\r\n    ({ type: { name } }: { type: { name: PokemonType } }) => ({\r\n      [name]: pokemonTypes[name],\r\n    })\r\n  );\r\n  const image =\r\n    data.sprites.other.home.front_default ||\r\n    data.sprites.other.home.front_default ||\r\n    data.sprites.front_shiny ||\r\n    data.sprites.front_default;\r\n\r\n  return {\r\n    name: data.name,\r\n    id: data.id,\r\n    image,\r\n    types,\r\n  };\r\n};\r\n\r\nexport const usePokemonQuery = (pokemonIds: number[]) => {\r\n  return useQuery(\"pokemonData\", async () => {\r\n    const promises = pokemonIds.map((pokemonId) => getPokemonData(pokemonId));\r\n    const results = await Promise.all(promises);\r\n\r\n    // Filter out null values (Pokémon without images)\r\n    return results.filter((pokemonData) => pokemonData !== null);\r\n  });\r\n};\r\n\r\nexport const usePokemonQueryByUrl = (pokemons: { url: string }[]) => {\r\n  return useQuery([\"pokemonDataByUrl\", pokemons], async () => {\r\n    const promises = pokemons.map((pokemon: { url: string }) =>\r\n      getPokemonDataByUrl(pokemon)\r\n    );\r\n    const results = await Promise.all(promises);\r\n\r\n    // Filter out null values (Pokémon without images)\r\n    return results.filter((pokemonData) => pokemonData !== null);\r\n  });\r\n};\r\nexport const useRandomPokemonQuery: () => UseQueryResult<\r\n  userPokemonsType[]\r\n> = () => {\r\n  return useQuery(\r\n    \"randomPokemonData\",\r\n    async () => {\r\n      const generateRandomNumbers = (count: number, max: number) => {\r\n        const randomNumbers: number[] = [];\r\n        while (randomNumbers.length < count) {\r\n          const randomNumber = Math.floor(Math.random() * max) + 1;\r\n          if (!randomNumbers.includes(randomNumber)) {\r\n            randomNumbers.push(randomNumber);\r\n          }\r\n        }\r\n        return randomNumbers;\r\n      };\r\n\r\n      const pokemonIds = generateRandomNumbers(80, 1302);\r\n      try {\r\n        const promises = pokemonIds.map((pokemonId: number) =>\r\n          getPokemonData(pokemonId)\r\n        );\r\n\r\n        const chunkedArrays = chunkArray(promises, 8);\r\n        const promiseChunks = chunkedArrays.map((chunk) => {\r\n          return Promise.race(chunk);\r\n        });\r\n        const firstResolvedResults = await Promise.all(promiseChunks);\r\n\r\n        if (firstResolvedResults !== null) {\r\n          return firstResolvedResults;\r\n        } else {\r\n          throw new Error(\"No valid Pokémon data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching random Pokémon data:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n    {\r\n      refetchInterval: 10000, // 10 seconds in milliseconds\r\n    }\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { IoGitCompare } from \"react-icons/io5\";\r\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\r\nimport {\r\n  addToCompare,\r\n  removeFromUserPokemonList,\r\n  setCurrentPokemon,\r\n} from \"../app/slices/PokemonSlice\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\r\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\r\nimport { pokemonTabs } from \"../utils/constants\";\r\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\r\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  return (\r\n    <div className=\"pokemon-card-grid-container\">\r\n      <div className=\"pokemon-card-grid\">\r\n        {pokemons &&\r\n          pokemons.length > 0 &&\r\n          pokemons?.map((data: userPokemonsType) => {\r\n            return (\r\n              <div key={data.id} className=\"pokemon-card\">\r\n                <div className=\"pokemon-card-list\">\r\n                  {location.pathname.includes(\"/pokemon\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : location.pathname.includes(\"/search\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : (\r\n                    <FaTrash\r\n                      className=\"trash\"\r\n                      onClick={async () => {\r\n                        await dispatch(removeFromUserPokemonList(data));\r\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\r\n                      }}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <div className=\"pokemon-card-compare\">\r\n                  <IoGitCompare\r\n                    onClick={() => {\r\n                      dispatch(addToCompare(data));\r\n                      dispatch(\r\n                        setToast(\r\n                          `${data.name} has been added to compare queue.`\r\n                        )\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\r\n                <img\r\n                  src={data.image}\r\n                  alt=\"\"\r\n                  className=\"pokemon-card-image\"\r\n                  loading=\"lazy\"\r\n                  onClick={() => {\r\n                    dispatch(setPokemonTab(pokemonTabs.description));\r\n                    dispatch(setCurrentPokemon(undefined));\r\n                    navigate(`/pokemon/${data.id}`);\r\n                  }}\r\n                />\r\n                <div className=\"pokemon-card-types\">\r\n                  {data.types.map(\r\n                    (type: pokemonTypeInterface, index: number) => {\r\n                      const keys = Object.keys(type);\r\n                      return (\r\n                        <div className=\"pokemon-card-types-type\" key={index}>\r\n                          <img\r\n                            src={type[keys[0]].image}\r\n                            alt=\"pokemon type\"\r\n                            className=\"pokemon-card-types-type-image\"\r\n                            loading=\"lazy\"\r\n                          />\r\n                          <h6 className=\"pokemon-card-types-type-text\">\r\n                            {keys[0]}\r\n                          </h6>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonCardGrid;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport PokemonCardGrid from \"../../components/PokemonCardGrid\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { getPokemonDataByUrl } from \"../../app/reducers/usePokemonData\";\r\nimport { userPokemonsType } from \"../../utils/types\";\r\n\r\nfunction Evolution() {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n  const pokemonData = useAppSelector(({ pokemon }) => pokemon);\r\n  const [evolutionsData, setEvolutionsData] = useState<userPokemonsType[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (pokemonData.currentPokemon) {\r\n        const evolutions = pokemonData.currentPokemon?.evolution.map(\r\n          (element) => {\r\n            const url = element.pokemon.url;\r\n            return getPokemonDataByUrl({ url });\r\n          }\r\n        );\r\n\r\n        if (evolutions) {\r\n          try {\r\n            const resolvedEvolutions = await Promise.all(evolutions);\r\n            setEvolutionsData(resolvedEvolutions);\r\n            setIsLoaded(true);\r\n          } catch (error) {\r\n            console.error(\"Error fetching evolution data:\", error);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dispatch, pokemonData.currentPokemon]);\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      {isLoaded ? <PokemonCardGrid pokemons={evolutionsData} /> : <Loader />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Evolution;\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nfunction Locations() {\r\n  const pokemonData = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n  return (\r\n    <div className=\"pokemon-locations\">\r\n      <ul className=\"pokemon-locations-list\">\r\n        {pokemonData?.encounters.map((encounter: string) => (\r\n          <li key={encounter} className=\"pokemon-location\">\r\n            {encounter}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Locations;\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nfunction CapableMoves() {\r\n  const pokemonData = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n  return (\r\n    <div className=\"page capable-moves\">\r\n      <h1 className=\"capable-moves-title\">Abilities</h1>\r\n      <ul className=\"capable-moves-list ability\">\r\n        {pokemonData?.pokemonAbilities.abilities.map((ability: string) => (\r\n          <li className=\"move\" key={ability}>\r\n            {ability}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h1 className=\"capable-moves-title\">Moves</h1>\r\n      <ul className=\"capable-moves-list\">\r\n        {pokemonData?.pokemonAbilities.moves.map((ability: string) => (\r\n          <li className=\"move\" key={ability}>\r\n            {ability}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CapableMoves;\r\n","import React, { useEffect } from \"react\";\r\nimport { pokemonTypes } from \"../utils\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\r\nimport { setPokemonTab } from \"../app/slices/AppSlice\";\r\nimport { pokemonTabs } from \"../utils/constants\";\r\nimport { currentPokemonType, pokemonStatsType } from \"../utils/types\";\r\n\r\nexport default function Info({\r\n  data,\r\n}: {\r\n  data: currentPokemonType | undefined;\r\n}) {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    const progressBars = document.querySelectorAll(\"progress\");\r\n    progressBars.forEach((progressBar) => {\r\n      progressBar.style.width = \"10rem\";\r\n    });\r\n  }, []);\r\n  const createStatsArray = (types: string[], statType: string) => {\r\n    const statsSet = new Set();\r\n    types.forEach((type: string) => {\r\n      // @ts-ignore\r\n      pokemonTypes[type][statType].forEach((stat: string) => {\r\n        if (!statsSet.has(stat)) {\r\n          statsSet.add(stat[0].toUpperCase() + stat.slice(1));\r\n        }\r\n      });\r\n    });\r\n    return Array.from(statsSet);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"details\">\r\n        <h1 className=\"name\">{data?.name}</h1>\r\n        <h3>Type: {data?.types.join(\" - \")}</h3>\r\n        <h3>Evolution: {data?.evolutionLevel}</h3>\r\n        <button onClick={() => dispatch(setPokemonTab(pokemonTabs.evolution))}>\r\n          See next evolution\r\n        </button>\r\n      </div>\r\n      <div className=\"stats\">\r\n        <ul>\r\n          {data?.stats.map((stat: pokemonStatsType) => {\r\n            return (\r\n              <li key={stat.name}>\r\n                {stat.name}: {stat.value}\r\n                <progress max={100} value={stat.value} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n      <div className=\"battle-stats\">\r\n        {\r\n          <ul>\r\n            <li>\r\n              <span>Strengths:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"strength\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>Weakness:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"weakness\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>Resistant:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"resistance\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>Vulnerable:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"vulnerable\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        }\r\n        <button\r\n          onClick={() => dispatch(addPokemonToList(data!))}\r\n          className=\"add-pokemon\"\r\n        >\r\n          Add Pokemon\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// import balbasaur from \"../assets/balbasaur.png\";\r\n// import pikachu from \"../assets/pikachu.png\";\r\n// import charlizard from \"../assets/charlizard.png\";\r\n\r\nexport default function PokemonContainer({ image }: { image: string }) {\r\n  return (\r\n    <>\r\n      <div className=\"circle-container\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\">\r\n            <img src={image} alt=\"\" />\r\n          </div>\r\n          <div className=\"lines\">\r\n            <div className=\"line line-1\"></div>\r\n            <div className=\"line line-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"circle-container circle-container-2\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\">\r\n            <img src={pikachu} alt=\"\" />\r\n          </div>\r\n          <div className=\"lines\">\r\n            <div className=\"line line-1\"></div>\r\n            <div className=\"line line-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"circle-container circle-container-3\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\">\r\n            <img src={charlizard} alt=\"\" />\r\n          </div>\r\n          <div className=\"lines\">\r\n            <div className=\"line line-1\"></div>\r\n            <div className=\"line line-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Info from \"../../components/Info\";\r\nimport PokemonContainer from \"../../components/PokemonContainer\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nfunction Description() {\r\n  const pokemonData = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n  return (\r\n    <>\r\n      <Info data={pokemonData} />\r\n      {pokemonData && <PokemonContainer image={pokemonData.image} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","// @ts-nocheck\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Wrapper from \"../sections/Wrapper\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Evolution from \"./Pokemon/Evolution\";\r\nimport Locations from \"./Pokemon/Locations\";\r\nimport CapableMoves from \"./Pokemon/CapableMoves\";\r\nimport Description from \"./Pokemon/Description\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport { setCurrentPokemon } from \"../app/slices/PokemonSlice\";\r\nimport { setPokemonTab } from \"../app/slices/AppSlice\";\r\nimport Loader from \"../components/Loader\";\r\nimport {\r\n  pokemonRoute,\r\n  pokemonSpeciesRoute,\r\n  pokemonTabs,\r\n} from \"../utils/constants\";\r\n\r\nfunction Pokemon() {\r\n  const params = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const currentPokemonTab = useAppSelector(\r\n    ({ app: { currentPokemonTab } }) => currentPokemonTab\r\n  );\r\n  const currentPokemon = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setPokemonTab(pokemonTabs.description));\r\n  }, [dispatch]);\r\n\r\n  const getRecursiveEvolution = useCallback(\r\n    (evolutionChain, level, evolutionData) => {\r\n      if (!evolutionChain.evolves_to.length) {\r\n        return evolutionData.push({\r\n          pokemon: {\r\n            ...evolutionChain.species,\r\n            url: evolutionChain.species.url.replace(\r\n              \"pokemon-species\",\r\n              \"pokemon\"\r\n            ),\r\n          },\r\n          level,\r\n        });\r\n      }\r\n      evolutionData.push({\r\n        pokemon: {\r\n          ...evolutionChain.species,\r\n          url: evolutionChain.species.url.replace(\"pokemon-species\", \"pokemon\"),\r\n        },\r\n        level,\r\n      });\r\n      return getRecursiveEvolution(\r\n        evolutionChain.evolves_to[0],\r\n        level + 1,\r\n        evolutionData\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  const getEvolutionData = useCallback(\r\n    (evolutionChain) => {\r\n      const evolutionData = [];\r\n      getRecursiveEvolution(evolutionChain, 1, evolutionData);\r\n      return evolutionData;\r\n    },\r\n    [getRecursiveEvolution]\r\n  );\r\n\r\n  const [isDataLoading, setIsDataLoading] = useState(true);\r\n  const getPokemonInfo = useCallback(\r\n    async (image) => {\r\n      const { data } = await axios.get(`${pokemonRoute}/${params.id}`);\r\n      const { data: dataEncounters } = await axios.get(\r\n        data.location_area_encounters\r\n      );\r\n\r\n      const {\r\n        data: {\r\n          evolution_chain: { url: evolutionURL },\r\n        },\r\n      } = await axios.get(`${pokemonSpeciesRoute}/${data.id}`);\r\n      const { data: evolutionData } = await axios.get(evolutionURL);\r\n\r\n      const pokemonAbilities = {\r\n        abilities: data.abilities.map(({ ability }) => ability.name),\r\n        moves: data.moves.map(({ move }) => move.name),\r\n      };\r\n\r\n      const encounters = [];\r\n      const evolution = getEvolutionData(evolutionData.chain);\r\n      let evolutionLevel;\r\n      evolutionLevel = evolution.find(\r\n        ({ pokemon }) => pokemon.name === data.name\r\n      ).level;\r\n      dataEncounters.forEach((encounter) => {\r\n        encounters.push(\r\n          encounter.location_area.name.toUpperCase().split(\"-\").join(\" \")\r\n        );\r\n      });\r\n      const stats = await data.stats.map(({ stat, base_stat }) => ({\r\n        name: stat.name,\r\n        value: base_stat,\r\n      }));\r\n      dispatch(\r\n        setCurrentPokemon({\r\n          id: data.id,\r\n          name: data.name,\r\n          types: data.types.map(({ type: { name } }) => name),\r\n          image:\r\n            data.sprites.other.home.front_default ||\r\n            data.sprites.other.home.front_shiny ||\r\n            data.sprites.other.dream_world.front_shiny ||\r\n            data.sprites.other.dream_world.front_default ||\r\n            data.sprites.front_shiny ||\r\n            data.sprites.front_default,\r\n          stats,\r\n          encounters,\r\n          evolutionLevel,\r\n          evolution,\r\n          pokemonAbilities,\r\n        })\r\n      );\r\n      setIsDataLoading(false);\r\n    },\r\n    [params.id, dispatch, getEvolutionData]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // const imageElemet = document.createElement(\"img\");\r\n    // imageElemet.src = images[params.id];\r\n    // const options = {\r\n    //   pixels: 10000,\r\n    //   distance: 1,\r\n    //   splitPower: 10,\r\n    //   colorValidator: (red, green, blue, alpha = 255) => alpha > 250,\r\n    //   saturationDistance: 0.2,\r\n    //   lightnessDistance: 0.2,\r\n    //   hueDistance: 0.083333333,\r\n    // };\r\n    // const getColor = async () => {\r\n    //   const color = await extractColors(imageElemet.src, options);\r\n    //   const root = document.documentElement;\r\n    //   root.style.setProperty(\"--accent-color\", color[0].hex.split('\"')[0]);\r\n    // };\r\n    // getColor();\r\n    // let image = images[params.id];\r\n    // if (!image) {\r\n    //   image = defaultImages[params.id];\r\n    // }\r\n    getPokemonInfo();\r\n  }, [params.id, getPokemonInfo]);\r\n\r\n  return (\r\n    <>\r\n      {!isDataLoading && currentPokemon ? (\r\n        <>\r\n          {currentPokemonTab === pokemonTabs.description && <Description />}\r\n          {currentPokemonTab === pokemonTabs.evolution && <Evolution />}\r\n          {currentPokemonTab === pokemonTabs.locations && <Locations />}\r\n          {currentPokemonTab === pokemonTabs.moves && <CapableMoves />}\r\n        </>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Wrapper(Pokemon);\r\n"],"names":["getPokemonData","async","data","axios","pokemonRoute","pokemonId","types","map","type","name","pokemonTypes","image","sprites","other","home","front_default","front_shiny","dream_world","id","getPokemonDataByUrl","pokemon","url","usePokemonQueryByUrl","pokemons","useQuery","promises","Promise","all","filter","pokemonData","useRandomPokemonQuery","pokemonIds","count","max","randomNumbers","length","randomNumber","Math","floor","random","includes","push","generateRandomNumbers","promiseChunks","array","chunkSize","result","i","slice","chunkArray","chunk","race","firstResolvedResults","Error","error","console","refetchInterval","dispatch","useAppDispatch","navigate","useNavigate","location","useLocation","className","pathname","onClick","addPokemonToList","removeFromUserPokemonList","setToast","addToCompare","src","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","index","keys","Object","isLoaded","setIsLoaded","useState","useAppSelector","evolutionsData","setEvolutionsData","useEffect","currentPokemon","evolutions","evolution","element","resolvedEvolutions","fetchData","PokemonCardGrid","Loader","encounters","encounter","pokemonAbilities","abilities","ability","moves","Info","document","querySelectorAll","forEach","progressBar","style","width","createStatsArray","statType","statsSet","Set","stat","has","add","toUpperCase","Array","from","join","evolutionLevel","stats","value","PokemonContainer","Wrapper","params","useParams","currentPokemonTab","app","getRecursiveEvolution","useCallback","evolutionChain","level","evolutionData","evolves_to","species","replace","getEvolutionData","isDataLoading","setIsDataLoading","getPokemonInfo","dataEncounters","location_area_encounters","evolution_chain","evolutionURL","pokemonSpeciesRoute","move","chain","find","location_area","split","base_stat"],"sourceRoot":""}