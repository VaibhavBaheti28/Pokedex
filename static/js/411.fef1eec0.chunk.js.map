{"version":3,"file":"static/js/411.fef1eec0.chunk.js","mappings":"oNAmGA,QArFA,SAAyB,GAAiD,IAAjD,SAAEA,GAA4C,EACrE,MAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjB,OACE,gBAAKC,UAAU,8BAA6B,UAC1C,gBAAKA,UAAU,oBAAmB,SAC/BP,GACCA,EAASQ,OAAS,IACV,OAARR,QAAQ,IAARA,OAAQ,EAARA,EAAUS,KAAKC,IAEX,iBAAmBH,UAAU,eAAc,WACzC,gBAAKA,UAAU,oBAAmB,SAC/BF,EAASM,SAASC,SAAS,aAKxBP,EAASM,SAASC,SAAS,YAJ7B,SAAC,MAAM,CACLL,UAAU,OACVM,QAAS,IAAMZ,GAASa,EAAAA,EAAAA,GAAiBJ,OAQ3C,SAAC,MAAO,CACNH,UAAU,QACVM,QAASE,gBACDd,GAASe,EAAAA,EAAAA,IAA0BN,IACzCT,GAASgB,EAAAA,EAAAA,IAAS,iCAAiC,OAK3D,gBAAKV,UAAU,uBAAsB,UACnC,SAAC,MAAY,CACXM,QAAS,KACPZ,GAASiB,EAAAA,EAAAA,IAAaR,IACtBT,GACEgB,EAAAA,EAAAA,IAAS,GAAD,OACHP,EAAKS,KAAI,sCAEf,OAIP,eAAIZ,UAAU,qBAAoB,SAAEG,EAAKS,QACzC,gBACEC,IAAKV,EAAKW,MACVC,IAAI,GACJf,UAAU,qBACVgB,QAAQ,OACRV,QAAS,KACPZ,GAASuB,EAAAA,EAAAA,IAAcC,EAAAA,GAAAA,cACvBxB,GAASyB,EAAAA,EAAAA,SAAkBC,IAC3BxB,EAAS,YAAD,OAAaO,EAAKkB,IAAK,KAGnC,gBAAKrB,UAAU,qBAAoB,SAChCG,EAAKmB,MAAMpB,KACV,CAACqB,EAA4BC,KAC3B,MAAMC,EAAOC,OAAOD,KAAKF,GACzB,OACE,iBAAKvB,UAAU,0BAAyB,WACtC,gBACEa,IAAKU,EAAKE,EAAK,IAAIX,MACnBC,IAAI,eACJf,UAAU,gCACVgB,QAAQ,UAEV,eAAIhB,UAAU,+BAA8B,SACzCyB,EAAK,OARoCD,EAUxC,QA7DNrB,EAAKkB,UAwE7B,C,kIC1FO,MAAMM,GAAkBC,EAAAA,EAAAA,IAC7B,yBACApB,UACE,IACE,MAAMqB,EAAgBpC,EAASS,KAAK4B,GAAYC,EAAAA,EAAAA,IAAUD,EAAQE,OAI5DC,SAFkBC,QAAQC,IAAIN,IAEmB3B,KACrD,IAIO,IAJN,KACCC,GAGD,EACC,MAAMmB,EAAQnB,EAAKmB,MAAMpB,KACvB,QAAGqB,MAAM,KAAEX,IAAoC,QAAM,CACnD,CAACA,GAAOwB,EAAAA,EAAaxB,GACtB,IAEGE,EACJX,EAAKkC,QAAQC,MAAMC,KAAKC,eACxBrC,EAAKkC,QAAQC,MAAMC,KAAKE,aACxBtC,EAAKkC,QAAQC,MAAMI,YAAYD,aAC/BtC,EAAKkC,QAAQC,MAAMI,YAAYF,eAC/BrC,EAAKkC,QAAQI,aACbtC,EAAKkC,QAAQG,cAEf,OAAI1B,EACK,CACLF,KAAMT,EAAKS,KACXS,GAAIlB,EAAKkB,GACTP,QACAQ,SAIG,IAAI,IASf,OAJ6BW,EAAaU,QACvCC,GAAgC,OAAhBA,GAMrB,CAFE,MAAOC,GACPC,QAAQC,MAAMF,EAChB,K,uBCrBJ,QA3BA,WACE,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GACnCxD,GAAWC,EAAAA,EAAAA,KACXiD,GAAcO,EAAAA,EAAAA,IAAe,QAAC,QAAErB,GAAS,SAAKA,CAAO,IAa3D,OAZAsB,EAAAA,EAAAA,YAAU,KACU5C,WAChB,MAAMf,EACJmD,EAAYS,eAAgBC,UAAUpD,KACpC,QAAC,QAAE4B,GAA0C,SAAKA,CAAO,UAEvDpC,EAASiC,EAAgBlC,IAC/BwD,GAAY,EAAK,EAEnBM,EAAW,GACV,CAAC7D,EAAUkD,EAAYS,kBAGxB,gBAAKrD,UAAU,OAAM,SAClBgD,GACC,SAACQ,EAAA,EAAe,CAAC/D,SAAUmD,EAAYa,kBAEvC,SAACC,EAAA,EAAM,KAIf,ECZA,QAjBA,WACE,MAAMd,GAAcO,EAAAA,EAAAA,IAClB,QAAGrB,SAAS,eAAEuB,IAAkB,SAAKA,CAAc,IAErD,OACE,gBAAKrD,UAAU,oBAAmB,UAChC,eAAIA,UAAU,yBAAwB,SACxB,OAAX4C,QAAW,IAAXA,OAAW,EAAXA,EAAae,WAAWzD,KAAK0D,IAC5B,eAAoB5D,UAAU,mBAAkB,SAC7C4D,GADMA,QAOnB,ECWA,QA1BA,WACE,MAAMhB,GAAcO,EAAAA,EAAAA,IAClB,QAAGrB,SAAS,eAAEuB,IAAkB,SAAKA,CAAc,IAErD,OACE,iBAAKrD,UAAU,qBAAoB,WACjC,eAAIA,UAAU,sBAAqB,SAAC,eACpC,eAAIA,UAAU,6BAA4B,SAC5B,OAAX4C,QAAW,IAAXA,OAAW,EAAXA,EAAaiB,iBAAiBC,UAAU5D,KAAK6D,IAC5C,eAAI/D,UAAU,OAAM,SACjB+D,GADuBA,QAK9B,eAAI/D,UAAU,sBAAqB,SAAC,WACpC,eAAIA,UAAU,qBAAoB,SACpB,OAAX4C,QAAW,IAAXA,OAAW,EAAXA,EAAaiB,iBAAiBG,MAAM9D,KAAK6D,IACxC,eAAI/D,UAAU,OAAM,SACjB+D,GADuBA,SAOpC,E,kCCnBe,SAASE,EAAK,GAIzB,IAJyB,KAC3B9D,GAGD,EACC,MAAMT,GAAWC,EAAAA,EAAAA,MACjByD,EAAAA,EAAAA,YAAU,KACac,SAASC,iBAAiB,YAClCC,SAASC,IACpBA,EAAYC,MAAMC,MAAQ,OAAO,GACjC,GACD,IACH,MAAMC,EAAmB,CAAClD,EAAiBmD,KACzC,MAAMC,EAAW,IAAIC,IASrB,OARArD,EAAM8C,SAAS7C,IAEba,EAAAA,EAAab,GAAMkD,GAAUL,SAASQ,IAC/BF,EAASG,IAAID,IAChBF,EAASI,IAAIF,EAAK,GAAGG,cAAgBH,EAAKI,MAAM,GAClD,GACA,IAEGC,MAAMC,KAAKR,EAAS,EAE7B,OACE,iCACE,iBAAK1E,UAAU,UAAS,WACtB,eAAIA,UAAU,OAAM,SAAM,OAAJG,QAAI,IAAJA,OAAI,EAAJA,EAAMS,QAC5B,0BAAI,SAAW,OAAJT,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,MAAM6D,KAAK,WAC5B,0BAAI,cAAgB,OAAJhF,QAAI,IAAJA,OAAI,EAAJA,EAAMiF,mBACtB,mBAAQ9E,QAAS,IAAMZ,GAASuB,EAAAA,EAAAA,IAAcC,EAAAA,GAAAA,YAAwB,SAAC,2BAIzE,gBAAKlB,UAAU,QAAO,UACpB,wBACO,OAAJG,QAAI,IAAJA,OAAI,EAAJA,EAAMkF,MAAMnF,KAAK0E,IAEd,0BACGA,EAAKhE,KAAK,KAAGgE,EAAKU,OACnB,qBAAUC,IAAK,IAAKD,MAAOV,EAAKU,UAFzBV,EAAKhE,aAQtB,iBAAKZ,UAAU,eAAc,WAEzB,2BACE,2BACE,0BAAM,gBACN,0BACGwE,EACK,OAAJrE,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,MACN,YACA6D,KAAK,YAGX,2BACE,0BAAM,eACN,0BACGX,EACK,OAAJrE,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,MACN,YACA6D,KAAK,YAGX,2BACE,0BAAM,gBACN,0BACGX,EACK,OAAJrE,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,MACN,cACA6D,KAAK,YAGX,2BACE,0BAAM,iBACN,0BACGX,EACK,OAAJrE,QAAI,IAAJA,OAAI,EAAJA,EAAMmB,MACN,cACA6D,KAAK,eAKf,mBACE7E,QAAS,IAAMZ,GAASa,EAAAA,EAAAA,GAAiBJ,IACzCH,UAAU,cAAa,SACxB,qBAMT,CCnGe,SAASwF,EAAiB,GAA+B,IAA/B,MAAE1E,GAA0B,EACnE,OACE,+BACE,gBAAKd,UAAU,mBAAkB,UAC/B,iBAAKA,UAAU,eAAc,WAC3B,gBAAKA,UAAU,eAAc,UAC3B,gBAAKa,IAAKC,EAAOC,IAAI,QAEvB,iBAAKf,UAAU,QAAO,WACpB,gBAAKA,UAAU,iBACf,gBAAKA,UAAU,yBA4B3B,CC1BA,QAZA,WACE,MAAM4C,GAAcO,EAAAA,EAAAA,IAClB,QAAGrB,SAAS,eAAEuB,IAAkB,SAAKA,CAAc,IAErD,OACE,iCACE,SAACY,EAAI,CAAC9D,KAAMyC,IACXA,IAAe,SAAC4C,EAAgB,CAAC1E,MAAO8B,EAAY9B,UAG3D,E,cC8JA,SAAe2E,EAAAA,EAAAA,IAzJf,WACE,MAAMC,GAASC,EAAAA,EAAAA,MACTjG,GAAWC,EAAAA,EAAAA,KACXiG,GAAoBzC,EAAAA,EAAAA,IACxB,QAAG0C,KAAK,kBAAED,IAAqB,SAAKA,CAAiB,IAEjDvC,GAAiBF,EAAAA,EAAAA,IACrB,QAAGrB,SAAS,eAAEuB,IAAkB,SAAKA,CAAc,KAGrDD,EAAAA,EAAAA,YAAU,KACR1D,GAASuB,EAAAA,EAAAA,IAAcC,EAAAA,GAAAA,aAAyB,GAC/C,CAACxB,IAEJ,MAAMoG,GAAwBC,EAAAA,EAAAA,cAC5B,CAACC,EAAgBC,EAAOC,IACjBF,EAAeG,WAAWlG,QAY/BiG,EAAcE,KAAK,CACjBtE,QAAS,IACJkE,EAAeK,QAClBrE,IAAKgE,EAAeK,QAAQrE,IAAIsE,QAAQ,kBAAmB,YAE7DL,UAEKH,EACLE,EAAeG,WAAW,GAC1BF,EAAQ,EACRC,IArBOA,EAAcE,KAAK,CACxBtE,QAAS,IACJkE,EAAeK,QAClBrE,IAAKgE,EAAeK,QAAQrE,IAAIsE,QAC9B,kBACA,YAGJL,WAgBN,IAGIM,GAAmBR,EAAAA,EAAAA,cACtBC,IACC,MAAME,EAAgB,GAEtB,OADAJ,EAAsBE,EAAgB,EAAGE,GAClCA,CAAa,GAEtB,CAACJ,KAGIU,EAAeC,IAAoBvD,EAAAA,EAAAA,WAAS,GAC7CwD,GAAiBX,EAAAA,EAAAA,cACrBvF,UACE,MAAM,KAAEL,SAAe4B,EAAAA,EAAAA,IAAU,GAAD,OAAI4E,EAAAA,GAAY,YAAIjB,EAAOrE,MACnDlB,KAAMyG,SAAyB7E,EAAAA,EAAAA,IACrC5B,EAAK0G,2BAIL1G,MACE2G,iBAAmB9E,IAAK+E,WAElBhF,EAAAA,EAAAA,IAAU,GAAD,OAAIiF,EAAAA,GAAmB,YAAI7G,EAAKkB,MAC3ClB,KAAM+F,SAAwBnE,EAAAA,EAAAA,IAAUgF,GAE1ClD,EAAmB,CACvBC,UAAW3D,EAAK2D,UAAU5D,KAAI,QAAC,QAAE6D,GAAS,SAAKA,EAAQnD,IAAI,IAC3DoD,MAAO7D,EAAK6D,MAAM9D,KAAI,QAAC,KAAE+G,GAAM,SAAKA,EAAKrG,IAAI,KAGzC+C,EAAa,GACbL,EAAYiD,EAAiBL,EAAcgB,OACjD,IAAI9B,EACJA,EAAiB9B,EAAU6D,MACzB,QAAC,QAAErF,GAAS,SAAKA,EAAQlB,OAAST,EAAKS,IAAI,IAC3CqF,MACFW,EAAexC,SAASR,IACtBD,EAAWyC,KACTxC,EAAUwD,cAAcxG,KAAKmE,cAAcsC,MAAM,KAAKlC,KAAK,KAC5D,IAEH,MAAME,QAAclF,EAAKkF,MAAMnF,KAAI,QAAC,KAAE0E,EAAI,UAAE0C,GAAW,QAAM,CAC3D1G,KAAMgE,EAAKhE,KACX0E,MAAOgC,EACR,IACD5H,GACEyB,EAAAA,EAAAA,IAAkB,CAChBE,GAAIlB,EAAKkB,GACTT,KAAMT,EAAKS,KACXU,MAAOnB,EAAKmB,MAAMpB,KAAI,QAAGqB,MAAM,KAAEX,IAAQ,SAAKA,CAAI,IAClDE,MACEX,EAAKkC,QAAQC,MAAMC,KAAKC,eACxBrC,EAAKkC,QAAQC,MAAMC,KAAKE,aACxBtC,EAAKkC,QAAQC,MAAMI,YAAYD,aAC/BtC,EAAKkC,QAAQC,MAAMI,YAAYF,eAC/BrC,EAAKkC,QAAQI,aACbtC,EAAKkC,QAAQG,cACf6C,QACA1B,aACAyB,iBACA9B,YACAO,sBAGJ4C,GAAiB,EAAM,GAEzB,CAACf,EAAOrE,GAAI3B,EAAU6G,IA4BxB,OAzBAnD,EAAAA,EAAAA,YAAU,KAsBRsD,GAAgB,GACf,CAAChB,EAAOrE,GAAIqF,KAGb,+BACIF,GAAiBnD,GACjB,gCACGuC,IAAsB1E,EAAAA,GAAAA,cAA2B,SAAC,EAAW,IAC7D0E,IAAsB1E,EAAAA,GAAAA,YAAyB,SAAC,EAAS,IACzD0E,IAAsB1E,EAAAA,GAAAA,YAAyB,SAAC,EAAS,IACzD0E,IAAsB1E,EAAAA,GAAAA,QAAqB,SAAC,EAAY,QAG3D,SAACwC,EAAA,EAAM,KAIf,G","sources":["components/PokemonCardGrid.tsx","app/reducers/getPokemonsData.ts","pages/Pokemon/Evolution.tsx","pages/Pokemon/Locations.tsx","pages/Pokemon/CapableMoves.tsx","components/Info.tsx","components/PokemonContainer.tsx","pages/Pokemon/Description.tsx","pages/Pokemon.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { IoGitCompare } from \"react-icons/io5\";\r\nimport { FaTrash, FaPlus } from \"react-icons/fa\";\r\nimport {\r\n  addToCompare,\r\n  removeFromUserPokemonList,\r\n  setCurrentPokemon,\r\n} from \"../app/slices/PokemonSlice\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { setPokemonTab, setToast } from \"../app/slices/AppSlice\";\r\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\r\nimport { pokemonTabs } from \"../utils/constants\";\r\nimport { pokemonTypeInterface, userPokemonsType } from \"../utils/types\";\r\nfunction PokemonCardGrid({ pokemons }: { pokemons: userPokemonsType[] }) {\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  return (\r\n    <div className=\"pokemon-card-grid-container\">\r\n      <div className=\"pokemon-card-grid\">\r\n        {pokemons &&\r\n          pokemons.length > 0 &&\r\n          pokemons?.map((data: userPokemonsType) => {\r\n            return (\r\n              <div key={data.id} className=\"pokemon-card\">\r\n                <div className=\"pokemon-card-list\">\r\n                  {location.pathname.includes(\"/pokemon\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : location.pathname.includes(\"/search\") ? (\r\n                    <FaPlus\r\n                      className=\"plus\"\r\n                      onClick={() => dispatch(addPokemonToList(data))}\r\n                    />\r\n                  ) : (\r\n                    <FaTrash\r\n                      className=\"trash\"\r\n                      onClick={async () => {\r\n                        await dispatch(removeFromUserPokemonList(data));\r\n                        dispatch(setToast(\"Pokemon Removed Successfully.\"));\r\n                      }}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <div className=\"pokemon-card-compare\">\r\n                  <IoGitCompare\r\n                    onClick={() => {\r\n                      dispatch(addToCompare(data));\r\n                      dispatch(\r\n                        setToast(\r\n                          `${data.name} has been added to compare queue.`\r\n                        )\r\n                      );\r\n                    }}\r\n                  />\r\n                </div>\r\n                <h3 className=\"pokemon-card-title\">{data.name}</h3>\r\n                <img\r\n                  src={data.image}\r\n                  alt=\"\"\r\n                  className=\"pokemon-card-image\"\r\n                  loading=\"lazy\"\r\n                  onClick={() => {\r\n                    dispatch(setPokemonTab(pokemonTabs.description));\r\n                    dispatch(setCurrentPokemon(undefined));\r\n                    navigate(`/pokemon/${data.id}`);\r\n                  }}\r\n                />\r\n                <div className=\"pokemon-card-types\">\r\n                  {data.types.map(\r\n                    (type: pokemonTypeInterface, index: number) => {\r\n                      const keys = Object.keys(type);\r\n                      return (\r\n                        <div className=\"pokemon-card-types-type\" key={index}>\r\n                          <img\r\n                            src={type[keys[0]].image}\r\n                            alt=\"pokemon type\"\r\n                            className=\"pokemon-card-types-type-image\"\r\n                            loading=\"lazy\"\r\n                          />\r\n                          <h6 className=\"pokemon-card-types-type-text\">\r\n                            {keys[0]}\r\n                          </h6>\r\n                        </div>\r\n                      );\r\n                    }\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonCardGrid;\r\n","// @ts-nocheck\r\n\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { pokemonTypes } from \"../../utils\";\r\nimport { generatedPokemonType, genericPokemonType } from \"../../utils/types\";\r\n\r\nexport const getPokemonsData = createAsyncThunk(\r\n  \"pokemon/randomPokemon\",\r\n  async (pokemons: genericPokemonType[]) => {\r\n    try {\r\n      const axiosRequests = pokemons.map((pokemon) => axios.get(pokemon.url));\r\n\r\n      const responses = await Promise.all(axiosRequests);\r\n\r\n      const pokemonsData: generatedPokemonType[] = responses.map(\r\n        ({\r\n          data,\r\n        }: {\r\n          data: { id: number; types: { type: genericPokemonType }[] };\r\n        }) => {\r\n          const types = data.types.map(\r\n            ({ type: { name } }: { type: { name: string } }) => ({\r\n              [name]: pokemonTypes[name],\r\n            })\r\n          );\r\n          const image =\r\n            data.sprites.other.home.front_default ||\r\n            data.sprites.other.home.front_shiny ||\r\n            data.sprites.other.dream_world.front_shiny ||\r\n            data.sprites.other.dream_world.front_default ||\r\n            data.sprites.front_shiny ||\r\n            data.sprites.front_default;\r\n\r\n          if (image) {\r\n            return {\r\n              name: data.name,\r\n              id: data.id,\r\n              image,\r\n              types,\r\n            };\r\n          }\r\n\r\n          return null; // or handle the case where image is not available\r\n        }\r\n      );\r\n\r\n      // Filter out null values (Pokémon without images)\r\n      const filteredPokemonsData = pokemonsData.filter(\r\n        (pokemonData) => pokemonData !== null\r\n      );\r\n\r\n      return filteredPokemonsData;\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\r\nimport PokemonCardGrid from \"../../components/PokemonCardGrid\";\r\nimport { getPokemonsData } from \"../../app/reducers/getPokemonsData\";\r\nimport Loader from \"../../components/Loader\";\r\nimport { genericPokemonType } from \"../../utils/types\";\r\n\r\nfunction Evolution() {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n  const pokemonData = useAppSelector(({ pokemon }) => pokemon);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const pokemons: genericPokemonType[] =\r\n        pokemonData.currentPokemon!.evolution.map(\r\n          ({ pokemon }: { pokemon: genericPokemonType }) => pokemon\r\n        );\r\n      await dispatch(getPokemonsData(pokemons));\r\n      setIsLoaded(true);\r\n    };\r\n    fetchData();\r\n  }, [dispatch, pokemonData.currentPokemon]);\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      {isLoaded ? (\r\n        <PokemonCardGrid pokemons={pokemonData.randomPokemons!} />\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Evolution;\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nfunction Locations() {\r\n  const pokemonData = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n  return (\r\n    <div className=\"pokemon-locations\">\r\n      <ul className=\"pokemon-locations-list\">\r\n        {pokemonData?.encounters.map((encounter: string) => (\r\n          <li key={encounter} className=\"pokemon-location\">\r\n            {encounter}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Locations;\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nfunction CapableMoves() {\r\n  const pokemonData = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n  return (\r\n    <div className=\"page capable-moves\">\r\n      <h1 className=\"capable-moves-title\">Abilities</h1>\r\n      <ul className=\"capable-moves-list ability\">\r\n        {pokemonData?.pokemonAbilities.abilities.map((ability: string) => (\r\n          <li className=\"move\" key={ability}>\r\n            {ability}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <h1 className=\"capable-moves-title\">Moves</h1>\r\n      <ul className=\"capable-moves-list\">\r\n        {pokemonData?.pokemonAbilities.moves.map((ability: string) => (\r\n          <li className=\"move\" key={ability}>\r\n            {ability}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CapableMoves;\r\n","import React, { useEffect } from \"react\";\r\nimport { pokemonTypes } from \"../utils\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { addPokemonToList } from \"../app/reducers/addPokemonToList\";\r\nimport { setPokemonTab } from \"../app/slices/AppSlice\";\r\nimport { pokemonTabs } from \"../utils/constants\";\r\nimport { currentPokemonType, pokemonStatsType } from \"../utils/types\";\r\n\r\nexport default function Info({\r\n  data,\r\n}: {\r\n  data: currentPokemonType | undefined;\r\n}) {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    const progressBars = document.querySelectorAll(\"progress\");\r\n    progressBars.forEach((progressBar) => {\r\n      progressBar.style.width = \"10rem\";\r\n    });\r\n  }, []);\r\n  const createStatsArray = (types: string[], statType: string) => {\r\n    const statsSet = new Set();\r\n    types.forEach((type: string) => {\r\n      // @ts-ignore\r\n      pokemonTypes[type][statType].forEach((stat: string) => {\r\n        if (!statsSet.has(stat)) {\r\n          statsSet.add(stat[0].toUpperCase() + stat.slice(1));\r\n        }\r\n      });\r\n    });\r\n    return Array.from(statsSet);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"details\">\r\n        <h1 className=\"name\">{data?.name}</h1>\r\n        <h3>Type: {data?.types.join(\" - \")}</h3>\r\n        <h3>Evolution: {data?.evolutionLevel}</h3>\r\n        <button onClick={() => dispatch(setPokemonTab(pokemonTabs.evolution))}>\r\n          See next evolution\r\n        </button>\r\n      </div>\r\n      <div className=\"stats\">\r\n        <ul>\r\n          {data?.stats.map((stat: pokemonStatsType) => {\r\n            return (\r\n              <li key={stat.name}>\r\n                {stat.name}: {stat.value}\r\n                <progress max={100} value={stat.value} />\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n      <div className=\"battle-stats\">\r\n        {\r\n          <ul>\r\n            <li>\r\n              <span>Strengths:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"strength\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>Weakness:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"weakness\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>Resistant:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"resistance\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n            <li>\r\n              <span>Vulnerable:</span>\r\n              <span>\r\n                {createStatsArray(\r\n                  data?.types as unknown as string[],\r\n                  \"vulnerable\"\r\n                ).join(\", \")}\r\n              </span>\r\n            </li>\r\n          </ul>\r\n        }\r\n        <button\r\n          onClick={() => dispatch(addPokemonToList(data!))}\r\n          className=\"add-pokemon\"\r\n        >\r\n          Add Pokemon\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n// import balbasaur from \"../assets/balbasaur.png\";\r\n// import pikachu from \"../assets/pikachu.png\";\r\n// import charlizard from \"../assets/charlizard.png\";\r\n\r\nexport default function PokemonContainer({ image }: { image: string }) {\r\n  return (\r\n    <>\r\n      <div className=\"circle-container\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\">\r\n            <img src={image} alt=\"\" />\r\n          </div>\r\n          <div className=\"lines\">\r\n            <div className=\"line line-1\"></div>\r\n            <div className=\"line line-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"circle-container circle-container-2\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\">\r\n            <img src={pikachu} alt=\"\" />\r\n          </div>\r\n          <div className=\"lines\">\r\n            <div className=\"line line-1\"></div>\r\n            <div className=\"line line-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"circle-container circle-container-3\">\r\n        <div className=\"outer-circle\">\r\n          <div className=\"inner-circle\">\r\n            <img src={charlizard} alt=\"\" />\r\n          </div>\r\n          <div className=\"lines\">\r\n            <div className=\"line line-1\"></div>\r\n            <div className=\"line line-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Info from \"../../components/Info\";\r\nimport PokemonContainer from \"../../components/PokemonContainer\";\r\nimport { useAppSelector } from \"../../app/hooks\";\r\n\r\nfunction Description() {\r\n  const pokemonData = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n  return (\r\n    <>\r\n      <Info data={pokemonData} />\r\n      {pokemonData && <PokemonContainer image={pokemonData.image} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","// @ts-nocheck\r\n\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Wrapper from \"../sections/Wrapper\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Evolution from \"./Pokemon/Evolution\";\r\nimport Locations from \"./Pokemon/Locations\";\r\nimport CapableMoves from \"./Pokemon/CapableMoves\";\r\nimport Description from \"./Pokemon/Description\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport { setCurrentPokemon } from \"../app/slices/PokemonSlice\";\r\nimport { setPokemonTab } from \"../app/slices/AppSlice\";\r\nimport Loader from \"../components/Loader\";\r\nimport {\r\n  pokemonRoute,\r\n  pokemonSpeciesRoute,\r\n  pokemonTabs,\r\n} from \"../utils/constants\";\r\n\r\nfunction Pokemon() {\r\n  const params = useParams();\r\n  const dispatch = useAppDispatch();\r\n  const currentPokemonTab = useAppSelector(\r\n    ({ app: { currentPokemonTab } }) => currentPokemonTab\r\n  );\r\n  const currentPokemon = useAppSelector(\r\n    ({ pokemon: { currentPokemon } }) => currentPokemon\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(setPokemonTab(pokemonTabs.description));\r\n  }, [dispatch]);\r\n\r\n  const getRecursiveEvolution = useCallback(\r\n    (evolutionChain, level, evolutionData) => {\r\n      if (!evolutionChain.evolves_to.length) {\r\n        return evolutionData.push({\r\n          pokemon: {\r\n            ...evolutionChain.species,\r\n            url: evolutionChain.species.url.replace(\r\n              \"pokemon-species\",\r\n              \"pokemon\"\r\n            ),\r\n          },\r\n          level,\r\n        });\r\n      }\r\n      evolutionData.push({\r\n        pokemon: {\r\n          ...evolutionChain.species,\r\n          url: evolutionChain.species.url.replace(\"pokemon-species\", \"pokemon\"),\r\n        },\r\n        level,\r\n      });\r\n      return getRecursiveEvolution(\r\n        evolutionChain.evolves_to[0],\r\n        level + 1,\r\n        evolutionData\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  const getEvolutionData = useCallback(\r\n    (evolutionChain) => {\r\n      const evolutionData = [];\r\n      getRecursiveEvolution(evolutionChain, 1, evolutionData);\r\n      return evolutionData;\r\n    },\r\n    [getRecursiveEvolution]\r\n  );\r\n\r\n  const [isDataLoading, setIsDataLoading] = useState(true);\r\n  const getPokemonInfo = useCallback(\r\n    async (image) => {\r\n      const { data } = await axios.get(`${pokemonRoute}/${params.id}`);\r\n      const { data: dataEncounters } = await axios.get(\r\n        data.location_area_encounters\r\n      );\r\n\r\n      const {\r\n        data: {\r\n          evolution_chain: { url: evolutionURL },\r\n        },\r\n      } = await axios.get(`${pokemonSpeciesRoute}/${data.id}`);\r\n      const { data: evolutionData } = await axios.get(evolutionURL);\r\n\r\n      const pokemonAbilities = {\r\n        abilities: data.abilities.map(({ ability }) => ability.name),\r\n        moves: data.moves.map(({ move }) => move.name),\r\n      };\r\n\r\n      const encounters = [];\r\n      const evolution = getEvolutionData(evolutionData.chain);\r\n      let evolutionLevel;\r\n      evolutionLevel = evolution.find(\r\n        ({ pokemon }) => pokemon.name === data.name\r\n      ).level;\r\n      dataEncounters.forEach((encounter) => {\r\n        encounters.push(\r\n          encounter.location_area.name.toUpperCase().split(\"-\").join(\" \")\r\n        );\r\n      });\r\n      const stats = await data.stats.map(({ stat, base_stat }) => ({\r\n        name: stat.name,\r\n        value: base_stat,\r\n      }));\r\n      dispatch(\r\n        setCurrentPokemon({\r\n          id: data.id,\r\n          name: data.name,\r\n          types: data.types.map(({ type: { name } }) => name),\r\n          image:\r\n            data.sprites.other.home.front_default ||\r\n            data.sprites.other.home.front_shiny ||\r\n            data.sprites.other.dream_world.front_shiny ||\r\n            data.sprites.other.dream_world.front_default ||\r\n            data.sprites.front_shiny ||\r\n            data.sprites.front_default,\r\n          stats,\r\n          encounters,\r\n          evolutionLevel,\r\n          evolution,\r\n          pokemonAbilities,\r\n        })\r\n      );\r\n      setIsDataLoading(false);\r\n    },\r\n    [params.id, dispatch, getEvolutionData]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // const imageElemet = document.createElement(\"img\");\r\n    // imageElemet.src = images[params.id];\r\n    // const options = {\r\n    //   pixels: 10000,\r\n    //   distance: 1,\r\n    //   splitPower: 10,\r\n    //   colorValidator: (red, green, blue, alpha = 255) => alpha > 250,\r\n    //   saturationDistance: 0.2,\r\n    //   lightnessDistance: 0.2,\r\n    //   hueDistance: 0.083333333,\r\n    // };\r\n    // const getColor = async () => {\r\n    //   const color = await extractColors(imageElemet.src, options);\r\n    //   const root = document.documentElement;\r\n    //   root.style.setProperty(\"--accent-color\", color[0].hex.split('\"')[0]);\r\n    // };\r\n    // getColor();\r\n    // let image = images[params.id];\r\n    // if (!image) {\r\n    //   image = defaultImages[params.id];\r\n    // }\r\n    getPokemonInfo();\r\n  }, [params.id, getPokemonInfo]);\r\n\r\n  return (\r\n    <>\r\n      {!isDataLoading && currentPokemon ? (\r\n        <>\r\n          {currentPokemonTab === pokemonTabs.description && <Description />}\r\n          {currentPokemonTab === pokemonTabs.evolution && <Evolution />}\r\n          {currentPokemonTab === pokemonTabs.locations && <Locations />}\r\n          {currentPokemonTab === pokemonTabs.moves && <CapableMoves />}\r\n        </>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Wrapper(Pokemon);\r\n"],"names":["pokemons","dispatch","useAppDispatch","navigate","useNavigate","location","useLocation","className","length","map","data","pathname","includes","onClick","addPokemonToList","async","removeFromUserPokemonList","setToast","addToCompare","name","src","image","alt","loading","setPokemonTab","pokemonTabs","setCurrentPokemon","undefined","id","types","type","index","keys","Object","getPokemonsData","createAsyncThunk","axiosRequests","pokemon","axios","url","pokemonsData","Promise","all","pokemonTypes","sprites","other","home","front_default","front_shiny","dream_world","filter","pokemonData","err","console","error","isLoaded","setIsLoaded","useState","useAppSelector","useEffect","currentPokemon","evolution","fetchData","PokemonCardGrid","randomPokemons","Loader","encounters","encounter","pokemonAbilities","abilities","ability","moves","Info","document","querySelectorAll","forEach","progressBar","style","width","createStatsArray","statType","statsSet","Set","stat","has","add","toUpperCase","slice","Array","from","join","evolutionLevel","stats","value","max","PokemonContainer","Wrapper","params","useParams","currentPokemonTab","app","getRecursiveEvolution","useCallback","evolutionChain","level","evolutionData","evolves_to","push","species","replace","getEvolutionData","isDataLoading","setIsDataLoading","getPokemonInfo","pokemonRoute","dataEncounters","location_area_encounters","evolution_chain","evolutionURL","pokemonSpeciesRoute","move","chain","find","location_area","split","base_stat"],"sourceRoot":""}